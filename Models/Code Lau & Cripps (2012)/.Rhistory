jump[i] = rnorm(n=1, mean=0, sd=1)
}
i = i + 1
}
return(list("loc"=loc, "jump"=jump))
}
J(lambda=1, T=1)
J = function(lambda, T) {
t = 0
i = 1
loc = c()
jump = c()
while (t < T) {
dt = rexp(n=1, rate=lambda)
t = t + dt
if (t < T) {
loc[i] = t
jump[i] = rnorm(n=1, mean=0, sd=1)
}
i = i + 1
}
return(list("loc"=loc, "jump"=jump))
}
J(lambda=1, T=1)
J = function(lambda, T) {
t = 0
J = 0
i = 1
loc = c()
jump = c()
while (t < T) {
dt = rexp(n=1, rate=lambda)
t = t + dt
if (t < T) {
jump = rnorm(n=1, mean=0, sd=1)
J = J + jump
}
i = i + 1
}
return(J)
}
J(lambda=1, T=1)
t = 0
J = 0
i = 1
loc = c()
jump = c()
T=1
lambda=2
while (t < T) {
dt = rexp(n=1, rate=lambda)
t = t + dt
if (t < T) {
loc[i] = t
jump[i] = rnorm(n=1, mean=0, sd=1)
J = J + jump[i]
}
i = i + 1
}
J = cumsum(jump)
J
jump
t = 0
J = 0
i = 1
loc = c()
jump = c()
while (t < T) {
dt = rexp(n=1, rate=lambda)
t = t + dt
if (t < T) {
loc[i] = t
jump[i] = rnorm(n=1, mean=0, sd=1)
J = J + jump[i]
}
i = i + 1
}
J = cumsum(jump)
J
jump
t = 0
J = 0
i = 1
loc = c()
jump = c()
while (t < T) {
dt = rexp(n=1, rate=lambda)
t = t + dt
if (t < T) {
loc[i] = t
jump[i] = rnorm(n=1, mean=0, sd=1)
J = J + jump[i]
}
i = i + 1
}
J = cumsum(jump)
J
jump
t = 0
J = 0
i = 1
loc = c()
jumps = c()
while (t < T) {
dt = rexp(n=1, rate=lambda)
t = t + dt
if (t < T) {
loc[i] = t
jumps[i] = rnorm(n=1, mean=0, sd=1)
}
i = i + 1
}
J = cumsum(jump)
J
J = cumsum(jumps)
jumps
jumps
J = cumsum(jumps)
J
J = function(lambda, T) {
t = 0
J = 0
i = 1
loc = c()
jumps = c()
while (t < T) {
dt = rexp(n=1, rate=lambda)
t = t + dt
if (t < T) {
loc[i] = t
jumps[i] = rnorm(n=1, mean=0, sd=1)
J[i] = J[i-1] = jumps[i]
}
i = i + 1
}
J = cumsum(jumps)
J
return(J)
}
J(lambda=1, T=1)
t = 0
J = c()
J[1] = 0
rbinom(n=1, size=1, prob=0.5)
rbinom(n=1, size=1, prob=0.5)
rbinom(n=1, size=1, prob=0.5)
rbinom(n=1, size=1, prob=0.5)
rbinom(n=1, size=1, prob=0.5)
J = function(lambda, T, n) {
t = 0
J = c()
J[1] = 0
for (t in 2:(n*T)) {
p_jump = lambda/n
I = rbinom(n=1, size=1, prob=p_jump)
size = rnorm(n=1, mean=0, sd=1)
J[t] = J[t-1] + I*size
}
return(J)
}
J(lambda=1, T=1)
plot.ts(J(lambda=1, T=1, n=10000))
plot.ts(J(lambda=1, T=1, n=10000))
plot.ts(J(lambda=1, T=1, n=10000))
plot.ts(J(lambda=1, T=1, n=10000))
plot.ts(J(lambda=1, T=1, n=10000))
plot.ts(J(lambda=1, T=1, n=10000))
plot.ts(J(lambda=1, T=1, n=10000))
plot.ts(J(lambda=1, T=1, n=10000))
plot.ts(J(lambda=1, T=1, n=10000))
Jump = function(lambda, T, n) {
t = 0
J = c()
J[1] = 0
for (t in 2:(n*T)) {
p_jump = lambda/n
I = rbinom(n=1, size=1, prob=p_jump)
size = rnorm(n=1, mean=0, sd=1)
J[t] = J[t-1] + I*size
}
return(J)
}
plot.ts(Jump(lambda=1, T=1, n=10000))
GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
T = 1
n = 10000
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
plot.ts(PJD)
PJD = function(mu, sigma, T, n) {
S = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=5, T=T, n=n)
return(S)
}
PJD = function(mu, sigma, lambda, T, n) {
S = GBM(mu=1, sigma=1, T=T, n=n) + Jump(lambda=lambda, T=T, n=n)
return(S)
}
PJD(mu=1, sigma=1, lambda=5, T=1, n=10000)
plot.ts(PJD(mu=1, sigma=1, lambda=5, T=1, n=10000))
plot.ts(PJD(mu=1, sigma=1, lambda=5, T=1, n=10000))
plot.ts(PJD(mu=1, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=1, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=1, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
GBM = function(mu, sigma, T, n) {
t = 0
S = c()
S[1] = 1
for (t in 2:(n*T)) {
dt = 1/n
dW = rnorm(n=1, mean=0, sd=sqrt(dt))
dS = mu*S[t-1]*dt + sigma*S[t-1]*dW
S[t] = S[t-1] + dS
}
return(S)
}
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=0, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=1, sigma=1, lambda=0, T=1, n=10000))
plot.ts(PJD(mu=1, sigma=1, lambda=5, T=1, n=10000))
plot.ts(PJD(mu=1, sigma=1, lambda=5, T=1, n=10000))
plot.ts(PJD(mu=1, sigma=1, lambda=5, T=1, n=10000))
BM = function(T, n) {
t = 0
W = c()
W[1] = 0
for (t in 2:(n*T)) {
dt = 1/n
dW = rnorm(n=1, mean=0, sd=sqrt(dt))
W[t] = W[t-1] + dW
}
return(W)
}
plot.ts(W(T=1, n=10000))
GBM = function(mu, sigma, T, n) {
t = 0
S = c()
S[1] = 1
for (t in 2:(n*T)) {
dt = 1/n
dW = rnorm(n=1, mean=0, sd=sqrt(dt))
dS = mu*S[t-1]*dt + sigma*S[t-1]*dW
S[t] = S[t-1] + dS
}
return(S)
}
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
GBM = function(mu, sigma, T, n) {
t = 0
S = c()
S[1] = 1
for (t in 2:(n*T)) {
dt = 1/n
dW = rnorm(n=1, mean=0, sd=sqrt(dt))
dlogS = mu*dt - 0.5*sigma^2*dt + sigma*dW
S[t] = exp(log(S[t-1]) + dlogS)
}
return(S)
}
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(GBM(mu=1, sigma=1, T=1, n=10000))
plot.ts(PJD(mu=1, sigma=1, lambda=5, T=1, n=10000))
install.packages("metRology")
library(bayesGARCH)
?bayesGARCH
library(extraDistr)
rdirch(n=100, alpha=rep(1/1000, 1000))
rdirichlet(n=100, alpha=rep(1/1000, 1000))
rdirichlet(n=1, alpha=rep(1/1000, 1000))
X = rdirichlet(n=1, alpha=rep(1/1000, 1000))
X[1]
X[2]
sort(X)
rbeta(n=1, 1,1)
rbeta(n=1, 1,1)
rbeta(n=1, 1,1)
rbeta(n=1, 1,1)
rbeta(n=1, 1,1)
rbeta(n=1, 1,1)
rbeta(n=1, 1,1)
library(extraDistr)
s_inv = rgamma(n=1000000, 10, 10)
X = rnorm(n=1000000, mean=0, sd=1/s_inv)
hist(X, border=NA, freq=F)
hist(X, border=NA, freq=F, breaks=500)
mean(1/s_inv^3)
mean(1/s_inv^2)^1.5
Y = rt(n=1000000, df=5)
hist(Y, border=NA, freq=F, breaks=500)
Y = rt(n=1000000, df=20)
hist(Y, border=NA, freq=F, breaks=500)
hist(X, border=NA, freq=F, breaks=500)
mean(X*(X<0))
mean(X*(X>0))
s = rtnorm(n=1000000, 0, 1, 0)
X = rnorm(n=1000000, 1, s)
hist(X, breaks=500, border=NA, freq=F)
hist(s, breaks=500)
hist(X, breaks=500, border=NA, freq=F)
kurtosis(X)
library(moments)
kurtosis(X)
skewness(X)
s = rtnorm(n=1000000, 0, sqrt(1000), 0)
X = rnorm(n=1000000, 1, s)
hist(X, breaks=500, border=NA, freq=F)
skewness(X)
kurtosis(X)
mean(s^3)
mean(s^2)^1.5
mean(s^4)
mean(s^2)^2
mean(s^4) / mean(s^2)^2
mean(s^3) / mean(s^2)^1.5
DP_PosteriorSamples <- read.csv("~/Library/CloudStorage/GoogleDrive-nikoch@ethz.ch/My Drive/1) ETH/1) Semester Paper/2) Code/Simulations/DP_PosteriorSamples.csv", header=FALSE)
View(DP_PosteriorSamples)
nrow(DP_PosteriorSamples)
ncol(DP_PosteriorSamples)
tail(DP_PosteriorSamples, n=5)
View(tail(DP_PosteriorSamples, n=5))
DP_PosteriorSamples[1000:1004,]
View(DP_PosteriorSamples[1000:1004,])
colMeans(DP_PosteriorSamples[1000:1100,][800:810])
colMeans(DP_PosteriorSamples[1000:1100,])
colMeans(DP_PosteriorSamples[1000:1100,])
DP_PosteriorSamples[1000,800]
DP_PosteriorSamples[1000,800]*3
samples = as.numeric(DP_PosteriorSamples)
samples = as.numeric(DP_PosteriorSamples[[1]])
samplse
samples
DP_PosteriorSamples[1000:1100,]
View(DP_PosteriorSamples[1000:1100,])
View(DP_PosteriorSamples[1000:1010,])
DP_PosteriorSamples <- read.csv("~/Library/CloudStorage/GoogleDrive-nikoch@ethz.ch/My Drive/1) ETH/1) Semester Paper/2) Code/Simulations/DP_PosteriorSamples.csv", header=T)
View(DP_PosteriorSamples[1000:1010,])
ncol(DP_PosteriorSamples)
nrow(DP_PosteriorSamples)
View(DP_PosteriorSamples[2500:2510,])
n=10
rep(c("omega_", "alpha_", "beta"), each=n)
rep(c("omega_", "alpha_", "beta"), n)
rep(1:n, each=n)
paste0(rep(c("omega_", "alpha_", "beta"), n), rep(1:n, each=n))
paste0(rep(c("omega_", "alpha_", "beta_"), n), rep(1:n, each=n))
X = rnorm(n=50, 0, 1)
all.garch = matrix(X, nrow=10)
X
all.garch
all.garch = as.data.frame(all.garch)
all.garch
n_post = 10
n=5
all.garch = as.data.frame(all.garch)
rownames(all.garch) = paste0("i=", 1:n_post)
colnames(all.garch) = paste0(rep(c("omega_", "alpha_", "beta_"), n), rep(1:n, each=n))
X = rnorm(150)
all.garch = matrix(X, ncol=15)
all.garch = as.data.frame(all.garch)
rownames(all.garch) = paste0("i=", 1:n_post)
colnames(all.garch) = paste0(rep(c("omega_", "alpha_", "beta_"), n), rep(1:n, each=n))
all.garch
n
paste0(rep(c("omega_", "alpha_", "beta_"), n), rep(1:n, each=n))
paste0(rep(c("omega_", "alpha_", "beta_"), n), rep(1:n, each=3))
colnames(all.garch) = paste0(rep(c("omega_", "alpha_", "beta_"), n), rep(1:n, each=3))
all.garch
save_samples = rbind(head(all.garch, n=3), tail(all.garch, n=3))
save_samples
View(DP_PosteriorSamples)
1.144 + 1.116 + 1.16
rnorm(1,0,3.42)
3.7 + 3.2*4.4^2 + 2.78 * 3.4
law
n.size=1000
C.n      <- 1:n.size;
C.n
c(rep(1,n.size/2),rep(2,n.size/2))
X
Y = X
garch.a.order
garch.a.order = 1
garch.b.order = 1
n.size = length(Y)
rep(c(var(Y),rep(0.1,garch.a.order),rep(0.1,garch.b.order)),n.size);
plot.ts(X)
dataR <- read.csv("S&P500_from_Jan2006_to_Oct2009.csv");
setwd("~/Library/CloudStorage/GoogleDrive-nikoch@ethz.ch/My Drive/1) ETH/1) Semester Paper/2) Code/Code_Lau")
dataR <- read.csv("S&P500_from_Jan2006_to_Oct2009.csv");
library(MSGARCH)
dataR <- read.csv("S&P500_from_Jan2006_to_Oct2009.csv");
len.R <- length(dataR[,7]);
dataRrv <- dataR[len.R:1,7];
Return.R <- 100*(log(dataRrv[-1])-log(dataRrv[-len.R]));
X = Return.R
plot.ts(X)
models = rep("sGARCH", 3)
innovs = rep("norm", 3)
n = length(X)
spec = CreateSpec(
variance.spec = list(model = models),
distribution.spec = list(distribution = innovs)
)
ctr = list(n.burn=burnin, nmcmc=n_post*thin, nthin=thin,
do.se=FALSE)
n.burn=1000
burnin=1000
n_post = 1000
thin = 1
spec = CreateSpec(
variance.spec = list(model = models),
distribution.spec = list(distribution = innovs)
)
ctr = list(n.burn=burnin, nmcmc=n_post*thin, nthin=thin,
do.se=FALSE)
fit = FitML(data=X, spec=spec)
models = rep("sGARCH", 2)
innovs = rep("norm", 2)
spec = CreateSpec(
variance.spec = list(model = models),
distribution.spec = list(distribution = innovs)
)
ctr = list(n.burn=burnin, nmcmc=n_post*thin, nthin=thin,
do.se=FALSE)
fit = FitML(data=X, spec=spec)
models = rep("sGARCH", 10)
innovs = rep("norm", 10)
n = length(X)
spec = CreateSpec(
variance.spec = list(model = models),
distribution.spec = list(distribution = innovs)
)
ctr = list(n.burn=burnin, nmcmc=n_post*thin, nthin=thin,
do.se=FALSE)
fit = FitML(data=X, spec=spec)
